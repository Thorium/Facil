configs:
  - appSettings: appsettings.json
  - envVars: ''

rulesets:
  - connectionString: $(connectionString)
    filename: DbGen.fs
    namespaceOrModuleDeclaration: module DbGen

    scriptBasePath: SQL

    prelude: |
      module MyPreludeModule =
        let x = 2


    procedures:
      - include: .*

      - for: WithoutDto
        result: anonymous

      - for: ProcVoptionIn
        voptionIn: true

      - for: ProcVoption.*Out
        voptionOut: true

      - for: ProcWithSingleRecordCol
        recordIfSingleCol: true

      - for: ProcWithOverriddenDtoParamName
        params:
          nameToBeOverridden:
            dtoName: newDtoParamName

      - for: RetVal
        useReturnValue: true

      - for: RetValVoption
        voptionIn: true
        voptionOut: true

      - for: ProcWithSkippedUnsupportedColumn
        columns:
          UnsupportedCol:
            skip: true

      - for: ProcColumnInh.ritance
        columns:
          '':
            skip: true
          Col1:
            skip: false
          Col4:
            skip: false

      - for: ProcColumnInheritance
        columns:
          Col2:
            skip: false
          Col4:
            skip: true

      - for: ProcNominalResult
        result: nominal

      - for: ProcWithNullParamOverrides
        params:
          foo:
            nullable: false
          bar:
            nullable: true

      - for: NominalParams$
        paramDto: nominal

      - for: ProcWithTempTable$
        tempTables:
          - definition: 'CREATE TABLE #tempTable (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'

      # This is a test in itself: Temp tables should work in extended stored procedures. If this 'test' fails,
      # generation should fail.
      - for: ProcWithTempTableNonIntrospectable$
        tempTables:
          - definition: 'CREATE TABLE #tempTable (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'


    scripts:
      - include: '**/*.sql'
        except: 'TempTableDefinitions/**/*.sql'

      - for: '**/*WithoutDto.sql'
        result: anonymous

      - for: ParamsUsedTwice.sql
        params:
          col1:
            nullable: true
            type: NVARCHAR(50)

      - for: SkippedUnsupportedColumn.sql
        columns:
          UnsupportedCol:
            skip: true

      - for: ParamInh*ritance.sql
        params:
          '':
            type: INT
            nullable: true
          col2:
            nullable: false

      - for: ParamInheritance.sql
        params:
          col2:
            type: BIGINT
          col3:
            type: BIT

      - for: ColumnInh*ritance.sql
        columns:
          '':
            skip: true
          Col1:
            skip: false
          Col4:
            skip: false

      - for: ColumnInheritance.sql
        columns:
          Col2:
            skip: false
          Col4:
            skip: true

      - for: UserDefinedTableType.sql
        params:
          tvp:
            type: dbo.MultiColNull

      - for: Voption/In.sql
        voptionIn: true
        params:
          param1:
            nullable: true
            type: NVARCHAR(50)

      - for: Voption/Out.sql
        voptionOut: true
        params:
          param1:
            nullable: true
            type: NVARCHAR(50)

      - for: Voption/TableOutWithDto.sql
        voptionOut: true

      - for: Voption/TableOutWithoutDto.sql
        voptionOut: true

      - for: Voption/TvpInOut.sql
        voptionOut: true
        params:
          tvp:
            type: dbo.MultiColNullVoption

      - for: Option/In.sql
        params:
          param1:
            nullable: true
            type: NVARCHAR(50)

      - for: Option/Out.sql
        params:
          param1:
            nullable: true
            type: NVARCHAR(50)

      - for: Option/TvpInOut.sql
        params:
          tvp:
            type: dbo.MultiColNull

      - for: SingleRecordCol.sql
        recordIfSingleCol: true

      - for: OverriddenDtoParamName.sql
        params:
          nameToBeOverridden:
            type: INT
            dtoName: newDtoParamName

      - for: DynamicSqlWithoutDeclaration.sql
        params:
          col1Filter:
            type: NVARCHAR(42)

      - for: DynamicSqlSensitiveToParamValues.sql
        params:
          orderBy:
            buildValue: TableCol1

      - for: DynamicSqlWithStringSplitParam.sql
        params:
          splitParam:
            type: NVARCHAR(100)

      - for: DynamicSqlWithTvp.sql
        params:
          tvp:
            type: dbo.SingleColNonNull

      - for: TempTableAllTypesNonNull.sql
        tempTables:
          - definition: TempTableDefinitions/TempTableAllTypesNonNull.sql

      - for: TempTableAllTypesNull.sql
        tempTables:
          - definition: TempTableDefinitions/TempTableAllTypesNull.sql

      - for: TempTableAllTypesNonNullNominalParams.sql
        tempTables:
          - definition: TempTableDefinitions/TempTableAllTypesNonNull.sql
        paramDto: nominal

      - for: TempTableAllTypesNullNominalParams.sql
        tempTables:
          - definition: TempTableDefinitions/TempTableAllTypesNull.sql
        paramDto: nominal

      - for: TempTableAllTypesNullVoption.sql
        voptionIn: true
        tempTables:
          - definition: TempTableDefinitions/TempTableAllTypesNull.sql

      - for: TempTableInlined.sql
        tempTables:

          # Deliberately uses the same temp table name as at least one other script to
          # ensure temp tables are dropped when parsing
          - definition: 'CREATE TABLE #tempTableInlined (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'

      - for: TempTableInlinedDynamic.sql
        tempTables:
          - definition: 'CREATE TABLE #tempTableInlined (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'

      - for: TempTableInlinedWithOtherParams.sql
        tempTables:
          - definition: 'CREATE TABLE #tempTableInlined (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'

      - for: MultipleTempTables.sql
        tempTables:
          - definition: 'CREATE TABLE #tempTable1 (Col1 INT NOT NULL, Col2 NVARCHAR(42) NULL)'
          - definition: 'CREATE TABLE #tempTable2 (Col1 INT NOT NULL, Col3 NVARCHAR(42) NOT NULL)'

      - for: TempTableWithLengthTypes.sql
        tempTables:
          - definition: |
              CREATE TABLE #tempTableWithLengthTypes (
                [binary] BINARY(3) NOT NULL,
                [char] CHAR(3) NOT NULL,
                [nchar] NCHAR(3) NOT NULL,
                [nvarchar] NVARCHAR(3) NOT NULL,
                [varbinary] VARBINARY(3) NOT NULL,
                [varchar] VARCHAR(3) NOT NULL
              )

      - for: TempTableWithMaxLengthTypes.sql
        tempTables:
          - definition: |
              CREATE TABLE #tempTableWithMaxLengthTypes (
                [nvarchar] NVARCHAR(MAX) NOT NULL,
                [varbinary] VARBINARY(MAX) NOT NULL,
                [varchar] VARCHAR(MAX) NOT NULL
              )

      - for: NominalResult.sql
        result: nominal

      - for: TableScriptSubdir/TableScriptConfiguredWithScriptRules
        voptionIn: true

      - for: ManualTableDtoResult.sql
        result: dbo.Table1

      # This is a test in itself: Build-time inserted parameter definitions must end with
      # semicolon in order for scripts that start with WITH to be valid
      - for: StartsWithCTE.sql
        params:
          tvp:
            type: dbo.SingleColNull


    tableDtos:
      - include: '.*'
        except: 'WithoutDto|TableWithSqlVariant'

      - for: Voption
        voption: true

      - for: 'dbo\.TableWithSkippedUnsupportedColumn'
        columns:
          UnsupportedCol:
            skip: true

      - for: TableDtoColumnInh.ritance
        columns:
          '':
            skip: true
          Col1:
            skip: false
          Col4:
            skip: false

      - for: TableDtoColumnInheritance
        columns:
          Col2:
            skip: false
          Col4:
            skip: true

      - for: TableWithSkippedPkColumn
        columns:
          Key1:
            skip: true

      - for: TableWithComputedCol
        includeColumns:
          - Id
          - Foo
        columns:
          Foo:
            skip: true
          Bar:
            skip: false

      - for: AllTypes(Non)?Null
        mappingCtor: true


    tableTypes:
      - for: Voption
        voption: true


    tableScripts:
      - include: 'dbo\.AllTypesNonNull|dbo\.AllTypesNull|dbo\.LengthTypes|dbo\.MaxLengthTypes'
        scripts:
          - type: insert
          - type: insertBatch
          - type: update
          - type: updateBatch
          - type: merge
          - type: mergeBatch
          - type: delete
          - type: getAll
          - type: getById


      - include: 'dbo\.TableWithIdentityCol'
        scripts:
          - type: insert
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: insertBatch
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: merge
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: mergeBatch
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: merge
            name: '{TableName}_MergeWithHoldlock'
            holdlock: true

          - type: mergeBatch
            name: '{TableName}_MergeBatchWithHoldlock'
            holdlock: true

          - type: insert
            name: TableScriptSubdir/TableScriptConfiguredWithScriptRules

          - type: update
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: updateBatch
            columns:
              '':
                output: true
              BAR:
                output: false
                paramName: bar

          - type: delete
            columns:
              '':
                output: true

          - type: getById
            columns:
              BAR:
                skip: true

          - type: getById
            name: '{TableName}_ById_WithSelectColumns'
            selectColumns:
              - Id
              - Foo

          - type: getById
            name: 'TableScriptSubdir/{SchemaName}_{TableName}_GetById'

          - type: getByIdBatch

          - type: getByColumns
            filterColumns:
              - Foo

          - type: getByColumnsBatch
            tableType: dbo.FilterForTableWithIdentityCol
            filterColumns:
              - Id
              - Foo

          # This is a test in itself: filter column order should be ignored when finding matching table types. If this
          # 'test' fails, generation should fail.
          - type: getByColumnsBatch
            name: '{TableName}_ByColumnsBatch_ReversedColumns'
            tableType: dbo.FilterForTableWithIdentityCol
            filterColumns:
              - Foo
              - Id

      - include: 'dbo\.Table1'
        scripts:
          - type: getByColumns
            filterColumns:
              - TableCol2

          - type: getByColumnsBatch
            filterColumns:
              - TableCol2

          - type: getByColumns
            filterColumns:
              - TableCol1

      # This is a test in itself: insert/update/delete/merge scripts for views should be
      # silently ignored. If this 'test' fails, generation should fail.
      - include: 'dbo\.View1'
        scripts:
          - type: insert
          - type: insertBatch
          - type: update
          - type: updateBatch
          - type: delete
          - type: merge
          - type: mergeBatch

      - include: 'dbo\.TableWithComputedCol'
        scripts:
          - type: insert
          - type: insertBatch
          - type: insert
            name: TableWithComputedCol_Insert_WithSkipFalse
            columns:
              Bar:
                skip: false
          - type: insertBatch
            name: TableWithComputedCol_InsertBatch_WithSkipFalse
            columns:
              Bar:
                skip: false
          - type: update
          - type: updateBatch
          - type: update
            name: TableWithComputedCol_Update_WithSkipFalse
            columns:
              Bar:
                skip: false
          - type: updateBatch
            name: TableWithComputedCol_UpdateBatch_WithSkipFalse
            columns:
              Bar:
                skip: false
          - type: merge
          - type: mergeBatch
          - type: merge
            name: TableWithComputedCol_Merge_WithSkipFalse
            columns:
              Bar:
                skip: false
          - type: mergeBatch
            name: TableWithComputedCol_MergeBatch_WithSkipFalse
            columns:
              Bar:
                skip: false

      - include: 'dbo\.DesignTimeExecuteTest'
        scripts:
          - type: getAll

      - include: 'dbo\.OptionTableWithoutDto'
        scripts:
          - type: getAll

      # This is a test in itself: table scripts should work even if the corresponding table DTO has skipped columns that
      # the script uses. If this 'test' fails, generation should fail.
      - include: 'dbo\.TableWithSkippedPkColumn'
        scripts:
          - type: getById
